{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fabric","require","Nuclear","createReactClass","reactor","Reactor","debug","keys","obj","key","ret","Object","Array","isArray","Error","hasOwnProperty","keyMirror","fabricData","activeObject","fabricCanvas","Canvas","fabricStore","Store","getInitialState","toImmutable","objects","initialize","this","on","saveFabricData","saveActiveObject","state","set","value","registerStores","Fabric","componentDidMount","el","ReactDOM","findDOMNode","height","window","innerHeight","width","innerWidth","backgroundColor","dispatch","toObject","getActiveObject","renderAll","render","NewObjects","mixins","ReactMixin","getDataBindings","get","size","style","float","onClick","addSquare","position","remove","color","Math","random","toString","bounding_box","Rect","originX","originY","fill","borderColor","opacity","top","left","add","setActiveObject","fire","ActiveObject","fabricObject","console","log","getObjects","App","useState","videoFilePath","setVideoFileURL","className","type","onChange","event","URL","createObjectURL","target","files","url","controls","Boolean","location","hostname","match","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb08b07f.chunk.js","sourcesContent":["import React, { useState } from \"react\"; \nimport ReactDOM from 'react-dom'\nimport './App.css';\nimport ReactPlayer from 'react-player'\n\nconst fabric = require(\"fabric\").fabric;\nconst Nuclear = require(\"nuclear-js\");\nconst createReactClass = require('create-react-class');\n\nvar keyMirror = function(obj) {\n  var ret = {};\n  var key;\n  if (!(obj instanceof Object && !Array.isArray(obj))) {\n    throw new Error('keyMirror(...): Argument must be an object.');\n  }\n  for (key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      ret[key] = key;\n    }\n  }\n  return ret;\n};\n\nvar reactor = new Nuclear.Reactor({ debug: true });\nvar keys = keyMirror({ fabricData: null, activeObject: null });\n\n// globally accessable fabricCanvas instance\nvar fabricCanvas = new fabric.Canvas();\n\n// A place to put fabric data\nvar fabricStore = Nuclear.Store({\n  getInitialState() {\n    return Nuclear.toImmutable({\n    \tfabricData: {\n      \tobjects: [],\n      },\n      activeObject: false,\n    })\n  },\n  initialize() {\n    this.on(keys.fabricData, this.saveFabricData)\n    this.on(keys.activeObject, this.saveActiveObject)\n  },\n  saveFabricData(state, fabricData) {\n\t\treturn state.set('fabricData', Nuclear.toImmutable(fabricData));\n\t},\n  saveActiveObject(state, value) {\n\t\treturn state.set('activeObject',value);\n\t}\n});\n\nreactor.registerStores({\n  'fabricStore': fabricStore,\n});\n\nvar Fabric = createReactClass({\n\tcomponentDidMount() {\n  \tvar el = ReactDOM.findDOMNode(this);\n    \n    // Here we have the canvas so we can initialize fabric\n    fabricCanvas.initialize(el, {\n    \theight: window.innerHeight * .75,\n      width: window.innerWidth-200 * .75,\n      backgroundColor : null,\n    });\n    \n    // on mouse up lets save some state\n    fabricCanvas.on('mouse:up', () => {\n      reactor.dispatch(keys.fabricData, fabricCanvas.toObject());\n      reactor.dispatch(keys.activeObject, !!fabricCanvas.getActiveObject());\n    });\n    \n    // an event we will fire when we want to save state\n    fabricCanvas.on('saveData', () => {\n    \treactor.dispatch(keys.fabricData, fabricCanvas.toObject());\n      reactor.dispatch(keys.activeObject, !!fabricCanvas.getActiveObject());\n      fabricCanvas.renderAll(); // programatic changes we make will not trigger a render in fabric\n    });\n  }, \n  render() {\n    return <canvas></canvas>\n  }\n});\n\nvar player_add;\n\nvar NewObjects = createReactClass({\n\tmixins: [reactor.ReactMixin],\n  getDataBindings() {\n  \treturn {\n    \tfabricData: ['fabricStore', 'fabricData'],\n    \tactiveObject: ['fabricStore', 'activeObject'],\n    };\n  },\n  render: function() {\n  \tif (this.state.fabricData.get('objects').size == 0) {\n    \t// no object is on the canvas so show interface to add one\n      //<input type=\"file\" id=\"video_submit\" value=\"none\"/> //onClick={this.addKanalImg}/>\n      return (\n      <div style={{float: \"right\"}}>\n        <br></br>\n        <button onClick={this.addSquare} style={{position:\"relative\"}}>Add Square</button>\n        <br></br>\n        <button onClick={this.remove} style={{position:\"relative\"}}>Remove</button>\n      </div>\n      );\n    } else {\n    \t// an object is selected so lets interact with it\n    \treturn (\n        <div style={{float: \"right\"}}>\n          <br></br>\n          <button onClick={this.addSquare} style={{position:\"relative\"}}>Add Square</button>\n          <br></br>\n          <button onClick={this.remove} style={{position:\"relative\"}}>Remove</button>\n        </div>\n      );\n    }//else {\n    \t// if there is an object but it is not selected then remove the buttons\n    \t//return null;\n    //}\n  },\n  addSquare() {\n    var color = \"#\" + ((1<<24)*Math.random() | 0).toString(16)\n    var bounding_box = new fabric.Rect({\n    \theight: 50,\n    \twidth: 50,\n      originX: 'center',\n      originY: 'center',\n      fill: color,\n      borderColor: '#000',\n      opacity: '.4',\n      top: fabricCanvas.height / 2,\n      left: fabricCanvas.width / 2,\n    })\n  \tfabricCanvas.add(bounding_box);\n    fabricCanvas.setActiveObject(bounding_box);\n    fabricCanvas.fire('saveData');\n  },\n  remove() {\n    fabricCanvas.remove(fabricCanvas.getActiveObject());\n    fabricCanvas.fire('saveData');\n  }\n});\n\nvar ActiveObject = createReactClass({\n\tmixins: [reactor.ReactMixin],\n  getDataBindings() {\n  \treturn {\n    \tfabricObject: ['fabricStore', 'fabricData', 'objects', 0],\n      activeObject: ['fabricStore', 'activeObject']\n    };\n  },\n  render: function() {\n    //return null;\n    console.log(fabricCanvas.getActiveObject())\n  \tif (this.state.fabricObject) {\n    \t// if an object exists in state we can acess the data from any where in the app\n    \tvar fill = this.state.fabricObject.get('fill');\n      console.log((fabricCanvas.getObjects()))\n      return (<div>\n        <div><b>Active Object</b></div>\n        <div>fill: <span style={{ color: fill}}>{this.state.fabricObject.get('fill')}</span></div>\n        <div>top: {this.state.fabricObject.get('top')}</div>\n        <div>left: {this.state.fabricObject.get('left')}</div>\n        <div>angle: {this.state.fabricObject.get('angle')}</div>\n        <div>scaleX: {this.state.fabricObject.get('scaleX')}</div>\n        <div>scaleY: {this.state.fabricObject.get('scaleY')}</div>\n      </div>);\n    } else {\n      console.log(fabricCanvas.getActiveObject())\n    \treturn null;\n    }\n  },\n});\n\nfunction App() {\n  const [videoFilePath, setVideoFileURL] = useState(null);\n  const handleVideoUpload = (event) => {\n    setVideoFileURL(URL.createObjectURL(event.target.files[0]));\n    };\n  const [videoFilePath1, setVideoFileURL1] = useState(null);\n  const handleVideoUpload1 = (event) => {\n    setVideoFileURL(URL.createObjectURL(event.target.files[0]));\n    };\n  return (\n    <div className=\"App\">\n      <div style={{ float: 'right' , position:'relative'}}>\n    \t\t<ActiveObject />\n    \t\t<NewObjects />\n      </div>\n      <input type=\"file\" onChange={handleVideoUpload} />\n      <ReactPlayer url={videoFilePath} width=\"75%\" height=\"75%\" controls={false} style={{position:'absolute'}}/>\n      <Fabric/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}